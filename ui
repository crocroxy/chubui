local library = {
    flags = {},
    tabs = 0,
    selectedTab = nil
}

library.Flags = library.flags

-- Dependencies
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local ViewportSize = workspace.CurrentCamera.ViewportSize
local Mouse = game.Players.LocalPlayer:GetMouse()
local Utilities = {}

-- Compatibility
local request = syn and syn.request or http and http.request or http_request or request or httprequest
local getcustomasset = getcustomasset or getsynasset
local isfolder = isfolder or syn_isfolder or is_folder
local makefolder = makefolder or make_folder or createfolder or create_folder

-- Variables
local DropIndex = 9999

-- Colors
local Colors = {
    Primary = Color3.fromRGB(27, 25, 27),
    Secondary = Color3.fromRGB(42, 40, 42),
    Tertiary = Color3.fromRGB(74, 73, 74),
    Divider = Color3.fromRGB(46, 45, 46),
    AccentDivider = Color3.fromRGB(54, 54, 54),
    PrimaryText = Color3.fromRGB(211, 211, 211),
    SecondaryText = Color3.fromRGB(122, 122, 122),
    TertiaryText = Color3.fromRGB(158, 158, 158),
    Hovering = Color3.fromRGB(56, 53, 56),
    Accent = Color3.fromRGB(100, 190, 31),
    DarkerAccent = Color3.fromRGB(87, 167, 26),
    AccentText = Color3.fromRGB(235, 235, 235)
}

-- Utility Functions
function Utilities:Create(className, properties, children)
    local instance = Instance.new(className)
    
    for property, value in pairs(properties or {}) do
        instance[property] = value
    end
    
    for _, child in ipairs(children or {}) do
        child.Parent = instance
    end
    
    return instance
end

function Utilities:Round(Number, Increment)
    Increment = 1 / Increment
    return math.round(Number * Increment) / Increment
end

function Utilities:Tween(instance, duration, properties)
    local tween = TweenService:Create(instance, TweenInfo.new(duration), properties)
    tween:Play()
    return tween
end

function Utilities:GetXY(GuiObject)
    local Max, May = GuiObject.AbsoluteSize.X, GuiObject.AbsoluteSize.Y
    local Px, Py = math.clamp(Mouse.X - GuiObject.AbsolutePosition.X, 0, Max), math.clamp(Mouse.Y - GuiObject.AbsolutePosition.Y, 0, May)
    return Px/Max, Py/May
end

function Utilities:GetMouse()
    return Vector2.new(UserInputService:GetMouseLocation().X + 1, UserInputService:GetMouseLocation().Y - 35)
end

-- Create PPHUD folder and download assets
if not isfolder("PPHUD") then
    makefolder("PPHUD")
    local Arrow = request({Url = "https://raw.githubusercontent.com/Rain-Design/PPHUD/main/Dropdown.png", Method = "GET"})
    writefile("PPHUD/Arrow.png", Arrow.Body)
    local Resize = request({Url = "https://raw.githubusercontent.com/Rain-Design/PPHUD/main/resize.png", Method = "GET"})
    writefile("PPHUD/Resize.png", Resize.Body)
end

-- Window Creation
function library:Window(title)
    title = title or "Window"
    
    -- Create window frame
    local window = Utilities:Create("ScreenGui", {
        Name = "UI",
        Parent = CoreGui
    })
    
    local main = Utilities:Create("Frame", {
        Name = "Main",
        Size = UDim2.new(0, 600, 0, 400),
        Position = UDim2.new(0.5, -300, 0.5, -200),
        BackgroundColor3 = Colors.Primary,
        Parent = window
    }, {
        -- Corner
        Utilities:Create("UICorner", {
            CornerRadius = UDim.new(0, 6)
        }),
        -- Title
        Utilities:Create("TextLabel", {
            Name = "Title",
            Text = title,
            Size = UDim2.new(1, -20, 0, 30),
            Position = UDim2.new(0, 10, 0, 5),
            BackgroundTransparency = 1,
            TextColor3 = Colors.PrimaryText,
            TextSize = 14,
            Font = Enum.Font.GothamBold,
            TextXAlignment = Enum.TextXAlignment.Left
        }),
        -- Tab Container
        Utilities:Create("Frame", {
            Name = "TabButtons",
            Size = UDim2.new(0, 130, 1, -40),
            Position = UDim2.new(0, 10, 0, 40),
            BackgroundTransparency = 1
        }, {
            Utilities:Create("UIListLayout", {
                Padding = UDim.new(0, 5),
                SortOrder = Enum.SortOrder.LayoutOrder
            })
        }),
        -- Content Container
        Utilities:Create("Frame", {
            Name = "Content",
            Size = UDim2.new(1, -150, 1, -40),
            Position = UDim2.new(0, 140, 0, 40),
            BackgroundTransparency = 1
        })
    })
    
    -- Make window draggable
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    main.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = main.Position
        end
    end)
    
    main.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    local window_obj = {}
    
    function window_obj:Tab(name)
        self.tabs = self.tabs + 1
        local tab = {}
        
        -- Create tab button
        local tabButton = Utilities:Create("TextButton", {
            Name = name,
            Size = UDim2.new(1, 0, 0, 30),
            BackgroundColor3 = self.tabs == 1 and Colors.Accent or Colors.Secondary,
            Parent = main.TabButtons,
            Text = "",
            AutoButtonColor = false
        }, {
            Utilities:Create("UICorner", {
                CornerRadius = UDim.new(0, 6)
            }),
            Utilities:Create("TextLabel", {
                Text = name,
                Size = UDim2.new(1, -20, 1, 0),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                TextColor3 = Colors.PrimaryText,
                TextSize = 13,
                Font = Enum.Font.GothamBold,
                TextXAlignment = Enum.TextXAlignment.Left
            })
        })
        
        -- Create tab content
        local tabContent = Utilities:Create("ScrollingFrame", {
            Name = name,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            ScrollBarThickness = 3,
            ScrollBarImageColor3 = Colors.Accent,
            Visible = self.tabs == 1,
            Parent = main.Content
        }, {
            Utilities:Create("UIListLayout", {
                Padding = UDim.new(0, 5),
                SortOrder = Enum.SortOrder.LayoutOrder
            })
        })
        
        -- Tab button click handler
        tabButton.MouseButton1Click:Connect(function()
            if self.selectedTab == tabContent then return end
            
            if self.selectedTab then
                self.selectedTab.Visible = false
                for _, button in ipairs(main.TabButtons:GetChildren()) do
                    if button:IsA("TextButton") then
                        Utilities:Tween(button, 0.2, {BackgroundColor3 = Colors.Secondary})
                    end
                end
            end
            
            self.selectedTab = tabContent
            tabContent.Visible = true
            Utilities:Tween(tabButton, 0.2, {BackgroundColor3 = Colors.Accent})
        end)
        
        function tab:Section(name)
            local section = {}
            
            -- Create section container
            local sectionFrame = Utilities:Create("Frame", {
                Name = name,
                Size = UDim2.new(1, -10, 0, 30),
                BackgroundColor3 = Colors.Secondary,
                Parent = tabContent
            }, {
                Utilities:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6)
                }),
                Utilities:Create("TextLabel", {
                    Text = name,
                    Size = UDim2.new(1, -20, 0, 30),
                    Position = UDim2.new(0, 10, 0, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = Colors.PrimaryText,
                    TextSize = 13,
                    Font = Enum.Font.GothamBold,
                    TextXAlignment = Enum.TextXAlignment.Left
                }),
                Utilities:Create("Frame", {
                    Name = "Container",
                    Size = UDim2.new(1, -20, 0, 0),
                    Position = UDim2.new(0, 10, 0, 35),
                    BackgroundTransparency = 1
                }, {
                    Utilities:Create("UIListLayout", {
                        Padding = UDim.new(0, 5),
                        SortOrder = Enum.SortOrder.LayoutOrder
                    })
                })
            })
            
            -- Auto-size section
            local container = sectionFrame.Container
            container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                sectionFrame.Size = UDim2.new(1, -10, 0, container.UIListLayout.AbsoluteContentSize.Y + 40)
                container.Size = UDim2.new(1, -20, 0, container.UIListLayout.AbsoluteContentSize.Y)
            end)
            
            -- UI Elements
            function section:Toggle(name, default, callback)
                default = default or false
                callback = callback or function() end
                
                library.flags[name] = default
                
                local toggle = Utilities:Create("Frame", {
                    Name = name,
                    Size = UDim2.new(1, 0, 0, 30),
                    BackgroundColor3 = Colors.Secondary,
                    Parent = container
                }, {
                    Utilities:Create("UICorner", {
                        CornerRadius = UDim.new(0, 6)
                    }),
                    Utilities:Create("TextLabel", {
                        Text = name,
                        Size = UDim2.new(1, -50, 1, 0),
                        Position = UDim2.new(0, 10, 0, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Colors.PrimaryText,
                        TextSize = 13,
                        Font = Enum.Font.GothamBold,
                        TextXAlignment = Enum.TextXAlignment.Left
                    }),
                    Utilities:Create("Frame", {
                        Name = "Indicator",
                        Size = UDim2.new(0, 20, 0, 20),
                        Position = UDim2.new(1, -30, 0.5, -10),
                        BackgroundColor3 = default and Colors.Accent or Colors.Tertiary
                    }, {
                        Utilities:Create("UICorner", {
                            CornerRadius = UDim.new(0, 6)
                        })
                    })
                })
                
                toggle.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        library.flags[name] = not library.flags[name]
                        Utilities:Tween(toggle.Indicator, 0.2, {
                            BackgroundColor3 = library.flags[name] and Colors.Accent or Colors.Tertiary
                        })
                        callback(library.flags[name])
                    end
                end)
                
                return toggle
            end
            
            function section:Slider(name, min, max, default, callback)
                min = min or 0
                max = max or 100
                default = default or min
                callback = callback or function() end
                
                library.flags[name] = default
                
                local slider = Utilities:Create("Frame", {
                    Name = name,
                    Size = UDim2.new(1, 0, 0, 45),
                    BackgroundColor3 = Colors.Secondary,
                    Parent = container
                }, {
                    Utilities:Create("UICorner", {
                        CornerRadius = UDim.new(0, 6)
                    }),
                    Utilities:Create("TextLabel", {
                        Text = name,
                        Size = UDim2.new(1, -20, 0, 30),
                        Position = UDim2.new(0, 10, 0, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Colors.PrimaryText,
                        TextSize = 13,
                        Font = Enum.Font.GothamBold,
                        TextXAlignment = Enum.TextXAlignment.Left
                    }),
                    Utilities:Create("Frame", {
                        Name = "SliderBar",
                        Size = UDim2.new(1, -20, 0, 4),
                        Position = UDim2.new(0, 10, 0, 35),
                        BackgroundColor3 = Colors.Tertiary
                    }, {
                        Utilities:Create("UICorner", {
                            CornerRadius = UDim.new(1, 0)
                        }),
                        Utilities:Create("Frame", {
                            Name = "Fill",
                            Size = UDim2.new((default - min)/(max - min), 0, 1, 0),
                            BackgroundColor3 = Colors.Accent
                        }, {
                            Utilities:Create("UICorner", {
                                CornerRadius = UDim.new(1, 0)
                            })
                        })
                    })
                })
                
                local dragging = false
                
                slider.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local pos = math.clamp((input.Position.X - slider.SliderBar.AbsolutePosition.X) / slider.SliderBar.AbsoluteSize.X, 0, 1)
                        local value = math.floor(min + (max - min) * pos)
                        
                        library.flags[name] = value
                        slider.SliderBar.Fill.Size = UDim2.new(pos, 0, 1, 0)
                        callback(value)
                    end
                end)
                
                return slider
            end
            
            function section:Dropdown(name, options, callback)
                options = options or {}
                callback = callback or function() end
                
                local dropdown = Utilities:Create("Frame", {
                    Name = name,
                    Size = UDim2.new(1, 0, 0, 30),
                    BackgroundColor3 = Colors.Secondary,
                    ClipsDescendants = true,
                    Parent = container
                }, {
                    Utilities:Create("UICorner", {
                        CornerRadius = UDim.new(0, 6)
                    }),
                    Utilities:Create("TextLabel", {
                        Text = name,
                        Size = UDim2.new(1, -20, 0, 30),
                        Position = UDim2.new(0, 10, 0, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Colors.PrimaryText,
                        TextSize = 13,
                        Font = Enum.Font.GothamBold,
                        TextXAlignment = Enum.TextXAlignment.Left
                    }),
                    Utilities:Create("Frame", {
                        Name = "OptionContainer",
                        Size = UDim2.new(1, -20, 0, 0),
                        Position = UDim2.new(0, 10, 0, 35),
                        BackgroundTransparency = 1
                    }, {
                        Utilities:Create("UIListLayout", {
                            Padding = UDim.new(0, 5),
                            SortOrder = Enum.SortOrder.LayoutOrder
                        })
                    })
                })
                
                local open = false
                
                for _, option in ipairs(options) do
                    local optionButton = Utilities:Create("TextButton", {
                        Text = option,
                        Size = UDim2.new(1, 0, 0, 25),
                        BackgroundColor3 = Colors.Tertiary,
                        Parent = dropdown.OptionContainer,
                        TextColor3 = Colors.PrimaryText,
                        TextSize = 13,
                        Font = Enum.Font.GothamBold
                    }, {
                        Utilities:Create("UICorner", {
                            CornerRadius = UDim.new(0, 6)
                        })
                    })
                    
                    optionButton.MouseButton1Click:Connect(function()
                        callback(option)
                        dropdown.Size = UDim2.new(1, 0, 0, 30)
                        open = false
                    end)
                end
                
                dropdown.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        if open then
                            dropdown.Size = UDim2.new(1, 0, 0, 30)
                        else
                            dropdown.Size = UDim2.new(1, 0, 0, 35 + dropdown.OptionContainer.UIListLayout.AbsoluteContentSize.Y)
                        end
                        open = not open
                    end
                end)
                
                return dropdown
            end
            
            function section:Button(name, callback)
                callback = callback or function() end
                
                local button = Utilities:Create("TextButton", {
                    Name = name,
                    Size = UDim2.new(1, 0, 0, 30),
                    BackgroundColor3 = Colors.Secondary,
                    Parent = container,
                    Text = name,
                    TextColor3 = Colors.PrimaryText,
                    TextSize = 13,
                    Font = Enum.Font.GothamBold
                }, {
                    Utilities:Create("UICorner", {
                        CornerRadius = UDim.new(0, 6)
                    })
                })
                
                button.MouseButton1Click:Connect(callback)
                
                return button
            end
            
            return section
        end
        
        if self.tabs == 1 then
            self.selectedTab = tabContent
        end
        
        return tab
    end
    
    if library.tabs == 0 then
        library.selectedTab = nil
    end
    
    return window_obj
end

return library 

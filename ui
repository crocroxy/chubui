local library = { flags = {} }
library.Flags = library.flags

-- Dependencies
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ViewportSize = workspace.CurrentCamera.ViewportSize
local Mouse = game.Players.LocalPlayer:GetMouse()
local Utilities = {}

-- Compatibility
local request = syn and syn.request or http and http.request or http_request or request or httprequest
local getcustomasset = getcustomasset or getsynasset
local isfolder = isfolder or syn_isfolder or is_folder
local makefolder = makefolder or make_folder or createfolder or create_folder

-- Variables
local DropIndex = 9999

-- Colors
local Colors = {
    Primary = Color3.fromRGB(27, 25, 27),
    Secondary = Color3.fromRGB(42, 40, 42),
    Tertiary = Color3.fromRGB(74, 73, 74),
    Divider = Color3.fromRGB(46, 45, 46),
    AccentDivider = Color3.fromRGB(54, 54, 54),
    PrimaryText = Color3.fromRGB(211, 211, 211),
    SecondaryText = Color3.fromRGB(122, 122, 122),
    TertiaryText = Color3.fromRGB(158, 158, 158),
    Hovering = Color3.fromRGB(56, 53, 56),
    Accent = Color3.fromRGB(100, 190, 31),
    DarkerAccent = Color3.fromRGB(87, 167, 26),
    AccentText = Color3.fromRGB(235, 235, 235)
}

-- Utility Functions
function Utilities:Create(Inst, Properties, Childs)
    local Instance = Instance.new(Inst)
    local Properties = Properties or {}
    local Childs = Childs or {}
    local BlacklistedProps = {
        BorderSizePixel = 0,
        Text = "",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    }

    for blprop, v in pairs(BlacklistedProps) do
        pcall(function() Instance[blprop] = v end)
    end

    for prop, v in pairs(Properties) do
        Instance[prop] = v
    end

    for _, child in pairs(Childs) do
        child.Parent = Instance
    end

    return Instance
end

function Utilities:Round(Number, Increment)
    Increment = 1 / Increment
    return math.round(Number * Increment) / Increment
end

function Utilities:Tween(Inst, Speed, Properties, Style, Direction)
    local Instance = Inst or error("#1 argument: instance expected.")
    local Speed = Speed or .125
    local Properties = typeof(Properties) == "table" and Properties or error("#3 argument: table expected, got: "..typeof(Properties))
    local Style = Style or Enum.EasingStyle.Linear
    local Direction = Direction or Enum.EasingDirection.Out
    local Tween = TweenService:Create(Instance, TweenInfo.new(Speed, Style, Direction), Properties)
    Tween:Play()
    return Tween
end

function Utilities:GetXY(GuiObject)
    local Max, May = GuiObject.AbsoluteSize.X, GuiObject.AbsoluteSize.Y
    local Px, Py = math.clamp(Mouse.X - GuiObject.AbsolutePosition.X, 0, Max), math.clamp(Mouse.Y - GuiObject.AbsolutePosition.Y, 0, May)
    return Px/Max, Py/May
end

function Utilities:GetMouse()
    return Vector2.new(UserInputService:GetMouseLocation().X + 1, UserInputService:GetMouseLocation().Y - 35)
end

-- Create PPHUD folder and download assets
if not isfolder("PPHUD") then
    makefolder("PPHUD")
    local Arrow = request({Url = "https://raw.githubusercontent.com/Rain-Design/PPHUD/main/Dropdown.png", Method = "GET"})
    writefile("PPHUD/Arrow.png", Arrow.Body)
    local Resize = request({Url = "https://raw.githubusercontent.com/Rain-Design/PPHUD/main/resize.png", Method = "GET"})
    writefile("PPHUD/Resize.png", Resize.Body)
end

-- Window Creation Function
function library:Window(WindowArgs)
    WindowArgs.Text = WindowArgs.Text or "Window"
    local WindowTable = {}
    WindowTable.__index = WindowTable
    self.Tabs = 0
    self.Hovering = false
    local SelectedTab = nil

    -- Create Main GUI
    local Window = Utilities:Create("ScreenGui", {
        Name = "PPHUD",
        ZIndexBehavior = Enum.ZIndexBehavior.Global
    }, {
        Utilities:Create("Frame", {
            Name = "Main",
            Size = UDim2.new(0, 600, 0, 400),
            BackgroundColor3 = Colors.Primary,
            ClipsDescendants = true,
            Position = UDim2.new(0, 600, 0, 270)
        }, {
            Utilities:Create("UIGradient", {
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(27, 25, 27)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(12, 10, 12))
                }),
                Offset = Vector2.new(0, 0.65),
                Rotation = 90
            }),
            -- Add TabHolder
            Utilities:Create("Frame", {
                Name = "TabHolder",
                Size = UDim2.new(0, 130, 1, -8),
                Position = UDim2.new(0, 6, 0, 8),
                BackgroundTransparency = 1
            }, {
                Utilities:Create("UIListLayout", {
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 6)
                })
            }),
            -- Add ContainerHolder
            Utilities:Create("Frame", {
                Name = "ContainerHolder",
                Size = UDim2.new(1, -142, 1, 0),
                Position = UDim2.new(0, 142, 0, 0),
                BackgroundTransparency = 1
            })
        })
    })

    -- Store references to holders
    WindowTable.TabHolder = Window.Main.TabHolder
    WindowTable.ContainerHolder = Window.Main.ContainerHolder

    -- Make window draggable
    local dragging
    local dragInput
    local dragStart
    local startPos

    Window.Main.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Window.Main.Position
        end
    end)

    Window.Main.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            Window.Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    -- Add window to CoreGui
    Window.Parent = CoreGui

    -- Add to the Window function after creating the main GUI
    function WindowTable:Tab(TabArgs)
        TabArgs.Text = TabArgs.Text or "Tab"
        local TabTable = {}
        
        self.Tabs = self.Tabs + 1
        
        -- Create Tab Button
        local TabButton = Utilities:Create("TextButton", {
            Name = "Tab",
            Size = UDim2.new(1, -10, 0, 30),
            BackgroundColor3 = Colors.Secondary,
            Parent = self.TabHolder
        }, {
            Utilities:Create("UICorner", {
                CornerRadius = UDim.new(0, 6)
            }),
            Utilities:Create("TextLabel", {
                Name = "Title",
                Text = TabArgs.Text,
                Size = UDim2.new(1, -10, 1, 0),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                TextColor3 = Colors.PrimaryText,
                TextSize = 13,
                Font = Enum.Font.GothamBold,
                TextXAlignment = Enum.TextXAlignment.Left
            })
        })
        
        -- Create Tab Container
        local TabContainer = Utilities:Create("ScrollingFrame", {
            Name = "Container",
            Size = UDim2.new(1, -142, 1, -8),
            Position = UDim2.new(0, 142, 0, 8),
            BackgroundTransparency = 1,
            ScrollBarImageColor3 = Colors.Accent,
            ScrollBarThickness = 3,
            Visible = self.Tabs == 1,
            Parent = self.ContainerHolder
        }, {
            Utilities:Create("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 6)
            })
        })
        
        -- Tab Selection Logic
        TabButton.MouseButton1Click:Connect(function()
            if SelectedTab == TabContainer then return end
            
            if SelectedTab then
                SelectedTab.Visible = false
                Utilities:Tween(TabButton, 0.2, {BackgroundColor3 = Colors.Secondary})
            end
            
            SelectedTab = TabContainer
            TabContainer.Visible = true
            Utilities:Tween(TabButton, 0.2, {BackgroundColor3 = Colors.Accent})
        end)
        
        -- Section Creation Function
        function TabTable:Section(Info)
            Info.Text = Info.Text or "Section"
            local SectionTable = {}
            
            -- Create Section Container
            local Section = Utilities:Create("Frame", {
                Name = "Section",
                Size = UDim2.new(1, -16, 0, 36),
                BackgroundColor3 = Colors.Secondary,
                Parent = TabContainer
            }, {
                Utilities:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6)
                }),
                Utilities:Create("TextLabel", {
                    Name = "Title",
                    Text = Info.Text,
                    Size = UDim2.new(1, -10, 0, 26),
                    Position = UDim2.new(0, 10, 0, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = Colors.TertiaryText,
                    TextSize = 13,
                    Font = Enum.Font.GothamBold,
                    TextXAlignment = Enum.TextXAlignment.Left
                }),
                Utilities:Create("Frame", {
                    Name = "Container",
                    Size = UDim2.new(1, -12, 1, -36),
                    Position = UDim2.new(0, 6, 0, 30),
                    BackgroundTransparency = 1
                }, {
                    Utilities:Create("UIListLayout", {
                        SortOrder = Enum.SortOrder.LayoutOrder,
                        Padding = UDim.new(0, 6)
                    })
                })
            })
            
            -- Toggle Function
            function SectionTable:Toggle(Info)
                Info.Text = Info.Text or "Toggle"
                Info.Flag = Info.Flag or Info.Text
                Info.Default = Info.Default or false
                
                library.flags[Info.Flag] = Info.Default
                
                local Toggle = Utilities:Create("Frame", {
                    Name = "Toggle",
                    Size = UDim2.new(1, 0, 0, 32),
                    BackgroundColor3 = Colors.Secondary,
                    Parent = Section.Container
                }, {
                    Utilities:Create("UICorner", {
                        CornerRadius = UDim.new(0, 6)
                    }),
                    Utilities:Create("TextLabel", {
                        Name = "Title",
                        Text = Info.Text,
                        Size = UDim2.new(1, -50, 1, 0),
                        Position = UDim2.new(0, 10, 0, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Colors.PrimaryText,
                        TextSize = 13,
                        Font = Enum.Font.GothamBold,
                        TextXAlignment = Enum.TextXAlignment.Left
                    }),
                    Utilities:Create("Frame", {
                        Name = "Indicator",
                        Size = UDim2.new(0, 20, 0, 20),
                        Position = UDim2.new(1, -30, 0.5, -10),
                        BackgroundColor3 = Info.Default and Colors.Accent or Colors.Tertiary
                    }, {
                        Utilities:Create("UICorner", {
                            CornerRadius = UDim.new(0, 6)
                        })
                    })
                })
                
                Toggle.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        library.flags[Info.Flag] = not library.flags[Info.Flag]
                        Utilities:Tween(Toggle.Indicator, 0.2, {BackgroundColor3 = library.flags[Info.Flag] and Colors.Accent or Colors.Tertiary})
                        if Info.Callback then
                            Info.Callback(library.flags[Info.Flag])
                        end
                    end
                end)
                
                return Toggle
            end
            
            -- Slider Function
            function SectionTable:Slider(Info)
                Info.Text = Info.Text or "Slider"
                Info.Flag = Info.Flag or Info.Text
                Info.Default = Info.Default or Info.Min
                Info.Min = Info.Min or 0
                Info.Max = Info.Max or 100
                Info.Increment = Info.Increment or 1
                
                library.flags[Info.Flag] = Info.Default
                
                local Slider = Utilities:Create("Frame", {
                    Name = "Slider",
                    Size = UDim2.new(1, 0, 0, 38),
                    BackgroundColor3 = Colors.Secondary,
                    Parent = Section.Container
                }, {
                    Utilities:Create("UICorner", {
                        CornerRadius = UDim.new(0, 6)
                    }),
                    Utilities:Create("TextLabel", {
                        Name = "Title",
                        Text = Info.Text,
                        Size = UDim2.new(1, -10, 0, 20),
                        Position = UDim2.new(0, 10, 0, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Colors.PrimaryText,
                        TextSize = 13,
                        Font = Enum.Font.GothamBold,
                        TextXAlignment = Enum.TextXAlignment.Left
                    }),
                    Utilities:Create("Frame", {
                        Name = "Bar",
                        Size = UDim2.new(1, -20, 0, 4),
                        Position = UDim2.new(0, 10, 0, 28),
                        BackgroundColor3 = Colors.Tertiary
                    }, {
                        Utilities:Create("UICorner", {
                            CornerRadius = UDim.new(1, 0)
                        }),
                        Utilities:Create("Frame", {
                            Name = "Fill",
                            Size = UDim2.new((Info.Default - Info.Min) / (Info.Max - Info.Min), 0, 1, 0),
                            BackgroundColor3 = Colors.Accent
                        }, {
                            Utilities:Create("UICorner", {
                                CornerRadius = UDim.new(1, 0)
                            })
                        })
                    }),
                    Utilities:Create("TextBox", {
                        Name = "Value",
                        Text = tostring(Info.Default),
                        Size = UDim2.new(0, 50, 0, 20),
                        Position = UDim2.new(1, -60, 0, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Colors.PrimaryText,
                        TextSize = 13,
                        Font = Enum.Font.GothamBold
                    })
                })
                
                local Dragging = false
                
                Slider.Bar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Dragging = true
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Dragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if Dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local X = math.clamp((input.Position.X - Slider.Bar.AbsolutePosition.X) / Slider.Bar.AbsoluteSize.X, 0, 1)
                        local Value = math.floor((Info.Min + (Info.Max - Info.Min) * X) / Info.Increment + 0.5) * Info.Increment
                        
                        library.flags[Info.Flag] = Value
                        Slider.Bar.Fill.Size = UDim2.new((Value - Info.Min) / (Info.Max - Info.Min), 0, 1, 0)
                        Slider.Value.Text = tostring(Value)
                        
                        if Info.Callback then
                            Info.Callback(Value)
                        end
                    end
                end)
                
                return Slider
            end
            
            -- Dropdown Function
            function SectionTable:Dropdown(Info)
                Info.Text = Info.Text or "Dropdown"
                Info.Flag = Info.Flag or Info.Text
                Info.Default = Info.Default or ""
                Info.List = Info.List or {}
                
                library.flags[Info.Flag] = Info.Default
                
                local Dropdown = Utilities:Create("Frame", {
                    Name = "Dropdown",
                    Size = UDim2.new(1, 0, 0, 32),
                    BackgroundColor3 = Colors.Secondary,
                    Parent = Section.Container,
                    ClipsDescendants = true
                }, {
                    Utilities:Create("UICorner", {
                        CornerRadius = UDim.new(0, 6)
                    }),
                    Utilities:Create("TextLabel", {
                        Name = "Title",
                        Text = Info.Text,
                        Size = UDim2.new(1, -10, 0, 32),
                        Position = UDim2.new(0, 10, 0, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Colors.PrimaryText,
                        TextSize = 13,
                        Font = Enum.Font.GothamBold,
                        TextXAlignment = Enum.TextXAlignment.Left
                    }),
                    Utilities:Create("ImageLabel", {
                        Name = "Arrow",
                        Size = UDim2.new(0, 20, 0, 20),
                        Position = UDim2.new(1, -25, 0, 6),
                        BackgroundTransparency = 1,
                        Image = getcustomasset("PPHUD/Arrow.png"),
                        ImageColor3 = Colors.PrimaryText
                    }),
                    Utilities:Create("Frame", {
                        Name = "Container",
                        Size = UDim2.new(1, -16, 0, 0),
                        Position = UDim2.new(0, 8, 0, 36),
                        BackgroundTransparency = 1
                    }, {
                        Utilities:Create("UIListLayout", {
                            SortOrder = Enum.SortOrder.LayoutOrder,
                            Padding = UDim.new(0, 4)
                        })
                    })
                })
                
                local Open = false
                
                local function Toggle()
                    Open = not Open
                    Utilities:Tween(Dropdown.Arrow, 0.2, {Rotation = Open and 180 or 0})
                    Utilities:Tween(Dropdown, 0.2, {Size = UDim2.new(1, 0, 0, Open and (38 + Dropdown.Container.UIListLayout.AbsoluteContentSize.Y) or 32)})
                end
                
                Dropdown.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Toggle()
                    end
                end)
                
                for _, Option in pairs(Info.List) do
                    local Button = Utilities:Create("TextButton", {
                        Name = Option,
                        Size = UDim2.new(1, 0, 0, 24),
                        BackgroundColor3 = Colors.Tertiary,
                        Text = Option,
                        TextColor3 = Colors.PrimaryText,
                        TextSize = 13,
                        Font = Enum.Font.GothamBold,
                        Parent = Dropdown.Container
                    }, {
                        Utilities:Create("UICorner", {
                            CornerRadius = UDim.new(0, 6)
                        })
                    })
                    
                    Button.MouseButton1Click:Connect(function()
                        library.flags[Info.Flag] = Option
                        Toggle()
                        if Info.Callback then
                            Info.Callback(Option)
                        end
                    end)
                end
                
                function Dropdown:UpdateDropdown(UpdateInfo)
                    UpdateInfo = typeof(UpdateInfo) == "table" and UpdateInfo or {}
                    UpdateInfo.List = UpdateInfo.List or {}
                    UpdateInfo.Value = UpdateInfo.Value or nil
                    
                    for _, Child in pairs(Dropdown.Container:GetChildren()) do
                        if Child:IsA("TextButton") then
                            Child:Destroy()
                        end
                    end
                    
                    for _, Option in pairs(UpdateInfo.List) do
                        local Button = Utilities:Create("TextButton", {
                            Name = Option,
                            Size = UDim2.new(1, 0, 0, 24),
                            BackgroundColor3 = Colors.Tertiary,
                            Text = Option,
                            TextColor3 = Colors.PrimaryText,
                            TextSize = 13,
                            Font = Enum.Font.GothamBold,
                            Parent = Dropdown.Container
                        }, {
                            Utilities:Create("UICorner", {
                                CornerRadius = UDim.new(0, 6)
                            })
                        })
                        
                        Button.MouseButton1Click:Connect(function()
                            library.flags[Info.Flag] = Option
                            Toggle()
                            if Info.Callback then
                                Info.Callback(Option)
                            end
                        end)
                    end
                    
                    if UpdateInfo.Value then
                        library.flags[Info.Flag] = UpdateInfo.Value
                    end
                end
                
                return Dropdown
            end
            
            -- Button Function
            function SectionTable:Button(Info)
                Info.Text = Info.Text or "Button"
                
                local Button = Utilities:Create("TextButton", {
                    Name = "Button",
                    Size = UDim2.new(1, 0, 0, 32),
                    BackgroundColor3 = Colors.Secondary,
                    Text = Info.Text,
                    TextColor3 = Colors.PrimaryText,
                    TextSize = 13,
                    Font = Enum.Font.GothamBold,
                    Parent = Section.Container
                }, {
                    Utilities:Create("UICorner", {
                        CornerRadius = UDim.new(0, 6)
                    })
                })
                
                Button.MouseButton1Click:Connect(function()
                    if Info.Callback then
                        Info.Callback()
                    end
                end)
                
                return Button
            end
            
            -- Update Section Size
            Section.Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                Section.Size = UDim2.new(1, -16, 0, Section.Container.UIListLayout.AbsoluteContentSize.Y + 36)
            end)
            
            return SectionTable
        end
        
        if self.Tabs == 1 then
            Utilities:Tween(TabButton, 0.2, {BackgroundColor3 = Colors.Accent})
            SelectedTab = TabContainer
        end
        
        return TabTable
    end

    return WindowTable
end

return library 

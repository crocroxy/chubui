-- Simple UI Library
local Library = {
    Flags = {},
    Connections = {}
}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local Mouse = game:GetService("Players").LocalPlayer:GetMouse()

-- Colors
local Colors = {
    Primary = Color3.fromRGB(27, 25, 27),
    Secondary = Color3.fromRGB(42, 40, 42),
    Tertiary = Color3.fromRGB(74, 73, 74),
    Divider = Color3.fromRGB(46, 45, 46),
    Text = Color3.fromRGB(211, 211, 211),
    Accent = Color3.fromRGB(100, 190, 31)
}

-- Utility Functions
local function Create(class, properties, children)
    local instance = Instance.new(class)
    
    for property, value in pairs(properties or {}) do
        instance[property] = value
    end
    
    for _, child in pairs(children or {}) do
        child.Parent = instance
    end
    
    return instance
end

local function Tween(instance, time, properties)
    local tween = TweenService:Create(instance, TweenInfo.new(time), properties)
    tween:Play()
    return tween
end

function Library:Window(title)
    local Window = {}
    
    -- Create ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "CrocHub"
    ScreenGui.Parent = game.CoreGui
    
    -- Create Main Frame
    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.Size = UDim2.new(0, 400, 0, 300)
    Main.Position = UDim2.new(0.5, -200, 0.5, -150)
    Main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Main.BorderSizePixel = 0
    Main.Parent = ScreenGui
    
    -- Make window draggable
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    Main.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Main.Position
        end
    end)
    
    Main.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    game:GetService("RunService").RenderStepped:Connect(function()
        if dragging and dragInput then
            local delta = dragInput.Position - dragStart
            Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    -- Create Title
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = Main
    
    local TitleText = Instance.new("TextLabel")
    TitleText.Name = "Title"
    TitleText.Size = UDim2.new(1, -10, 1, 0)
    TitleText.Position = UDim2.new(0, 10, 0, 0)
    TitleText.BackgroundTransparency = 1
    TitleText.Text = title
    TitleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleText.TextSize = 18
    TitleText.Font = Enum.Font.SourceSansBold
    TitleText.TextXAlignment = Enum.TextXAlignment.Left
    TitleText.Parent = TitleBar
    
    -- Create Tab Container
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabContainer"
    TabContainer.Size = UDim2.new(1, 0, 1, -30)
    TabContainer.Position = UDim2.new(0, 0, 0, 30)
    TabContainer.BackgroundTransparency = 1
    TabContainer.Parent = Main
    
    -- Create Tab Buttons
    local TabButtons = Instance.new("Frame")
    TabButtons.Name = "TabButtons"
    TabButtons.Size = UDim2.new(0, 100, 1, 0)
    TabButtons.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    TabButtons.BorderSizePixel = 0
    TabButtons.Parent = TabContainer
    
    local TabButtonList = Instance.new("UIListLayout")
    TabButtonList.SortOrder = Enum.SortOrder.LayoutOrder
    TabButtonList.Parent = TabButtons
    
    -- Create Tab Content
    local TabContent = Instance.new("Frame")
    TabContent.Name = "TabContent"
    TabContent.Size = UDim2.new(1, -100, 1, 0)
    TabContent.Position = UDim2.new(0, 100, 0, 0)
    TabContent.BackgroundTransparency = 1
    TabContent.Parent = TabContainer
    
    Window.Main = Main
    Window.Tabs = {}
    Window.CurrentTab = nil
    
    function Window:Tab(name)
        local Tab = {}
        
        -- Create Tab Button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = name
        TabButton.Size = UDim2.new(1, 0, 0, 30)
        TabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
        TabButton.BorderSizePixel = 0
        TabButton.Text = name
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        TabButton.TextSize = 14
        TabButton.Font = Enum.Font.SourceSans
        TabButton.Parent = TabButtons
        
        -- Create Tab Frame
        local TabFrame = Instance.new("ScrollingFrame")
        TabFrame.Name = name
        TabFrame.Size = UDim2.new(1, 0, 1, 0)
        TabFrame.BackgroundTransparency = 1
        TabFrame.ScrollBarThickness = 4
        TabFrame.Visible = false
        TabFrame.Parent = TabContent
        
        local ElementList = Instance.new("UIListLayout")
        ElementList.SortOrder = Enum.SortOrder.LayoutOrder
        ElementList.Padding = UDim.new(0, 5)
        ElementList.Parent = TabFrame
        
        TabButton.MouseButton1Click:Connect(function()
            if Window.CurrentTab then
                Window.CurrentTab.Visible = false
            end
            TabFrame.Visible = true
            Window.CurrentTab = TabFrame
        end)
        
        if not Window.CurrentTab then
            TabFrame.Visible = true
            Window.CurrentTab = TabFrame
        end
        
        function Tab:Toggle(text, default, flag, callback)
            Library.Flags[flag] = default
            
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Name = "Toggle"
            ToggleFrame.Size = UDim2.new(1, -10, 0, 30)
            ToggleFrame.Position = UDim2.new(0, 5, 0, 0)
            ToggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            ToggleFrame.BorderSizePixel = 0
            ToggleFrame.Parent = TabFrame
            
            local ToggleButton = Instance.new("TextButton")
            ToggleButton.Name = "Button"
            ToggleButton.Size = UDim2.new(0, 20, 0, 20)
            ToggleButton.Position = UDim2.new(0, 5, 0.5, -10)
            ToggleButton.BackgroundColor3 = default and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            ToggleButton.BorderSizePixel = 0
            ToggleButton.Text = ""
            ToggleButton.Parent = ToggleFrame
            
            local ToggleText = Instance.new("TextLabel")
            ToggleText.Name = "Text"
            ToggleText.Size = UDim2.new(1, -35, 1, 0)
            ToggleText.Position = UDim2.new(0, 30, 0, 0)
            ToggleText.BackgroundTransparency = 1
            ToggleText.Text = text
            ToggleText.TextColor3 = Color3.fromRGB(255, 255, 255)
            ToggleText.TextSize = 14
            ToggleText.Font = Enum.Font.SourceSans
            ToggleText.TextXAlignment = Enum.TextXAlignment.Left
            ToggleText.Parent = ToggleFrame
            
            ToggleButton.MouseButton1Click:Connect(function()
                Library.Flags[flag] = not Library.Flags[flag]
                ToggleButton.BackgroundColor3 = Library.Flags[flag] and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                callback(Library.Flags[flag])
            end)
        end
        
        function Tab:Slider(text, min, max, default, flag, callback)
            Library.Flags[flag] = default
            
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Name = "Slider"
            SliderFrame.Size = UDim2.new(1, -10, 0, 45)
            SliderFrame.Position = UDim2.new(0, 5, 0, 0)
            SliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            SliderFrame.BorderSizePixel = 0
            SliderFrame.Parent = TabFrame
            
            local SliderText = Instance.new("TextLabel")
            SliderText.Name = "Text"
            SliderText.Size = UDim2.new(1, -10, 0, 20)
            SliderText.Position = UDim2.new(0, 5, 0, 0)
            SliderText.BackgroundTransparency = 1
            SliderText.Text = text .. ": " .. tostring(default)
            SliderText.TextColor3 = Color3.fromRGB(255, 255, 255)
            SliderText.TextSize = 14
            SliderText.Font = Enum.Font.SourceSans
            SliderText.TextXAlignment = Enum.TextXAlignment.Left
            SliderText.Parent = SliderFrame
            
            local SliderBar = Instance.new("Frame")
            SliderBar.Name = "Bar"
            SliderBar.Size = UDim2.new(1, -10, 0, 5)
            SliderBar.Position = UDim2.new(0, 5, 0, 25)
            SliderBar.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            SliderBar.BorderSizePixel = 0
            SliderBar.Parent = SliderFrame
            
            local SliderFill = Instance.new("Frame")
            SliderFill.Name = "Fill"
            SliderFill.Size = UDim2.new((default - min)/(max - min), 0, 1, 0)
            SliderFill.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            SliderFill.BorderSizePixel = 0
            SliderFill.Parent = SliderBar
            
            local function updateSlider(input)
                local pos = UDim2.new(math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1), 0, 1, 0)
                SliderFill.Size = pos
                local value = math.floor(min + ((max - min) * pos.X.Scale))
                Library.Flags[flag] = value
                SliderText.Text = text .. ": " .. tostring(value)
                callback(value)
            end
            
            SliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local connection
                    connection = RunService.RenderStepped:Connect(function()
                        updateSlider(input)
                    end)
                    input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            connection:Disconnect()
                        end
                    end)
                end
            end)
        end
        
        function Tab:TextBox(text, default, flag, callback)
            local TextBoxFrame = Instance.new("Frame")
            TextBoxFrame.Name = "TextBox"
            TextBoxFrame.Size = UDim2.new(1, -10, 0, 30)
            TextBoxFrame.Position = UDim2.new(0, 5, 0, 0)
            TextBoxFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            TextBoxFrame.BorderSizePixel = 0
            TextBoxFrame.Parent = TabFrame
            
            local TextBoxLabel = Instance.new("TextLabel")
            TextBoxLabel.Name = "Label"
            TextBoxLabel.Size = UDim2.new(0.5, -5, 1, 0)
            TextBoxLabel.BackgroundTransparency = 1
            TextBoxLabel.Text = text
            TextBoxLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextBoxLabel.TextSize = 14
            TextBoxLabel.Font = Enum.Font.SourceSans
            TextBoxLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextBoxLabel.Parent = TextBoxFrame
            
            local TextBox = Instance.new("TextBox")
            TextBox.Name = "Input"
            TextBox.Size = UDim2.new(0.5, -5, 1, -4)
            TextBox.Position = UDim2.new(0.5, 5, 0, 2)
            TextBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            TextBox.BorderSizePixel = 0
            TextBox.Text = default
            TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextBox.TextSize = 14
            TextBox.Font = Enum.Font.SourceSans
            TextBox.Parent = TextBoxFrame
            
            TextBox.FocusLost:Connect(function(enterPressed)
                if enterPressed then
                    Library.Flags[flag] = TextBox.Text
                    callback(TextBox.Text)
                end
            end)
            
            -- Handle Escape key to cancel
            TextBox.Focused:Connect(function()
                local connection
                connection = UserInputService.InputBegan:Connect(function(input)
                    if input.KeyCode == Enum.KeyCode.Escape then
                        TextBox.Text = Library.Flags[flag] or default
                        TextBox:ReleaseFocus()
                    end
                end)
                
                TextBox.FocusLost:Connect(function()
                    if connection then
                        connection:Disconnect()
                    end
                end)
            end)
            
            Library.Flags[flag] = default
        end
        
        function Tab:Button(text, callback)
            local ButtonFrame = Instance.new("TextButton")
            ButtonFrame.Name = "Button"
            ButtonFrame.Size = UDim2.new(1, -10, 0, 30)
            ButtonFrame.Position = UDim2.new(0, 5, 0, 0)
            ButtonFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            ButtonFrame.BorderSizePixel = 0
            ButtonFrame.Text = text
            ButtonFrame.TextColor3 = Color3.fromRGB(255, 255, 255)
            ButtonFrame.TextSize = 14
            ButtonFrame.Font = Enum.Font.SourceSans
            ButtonFrame.Parent = TabFrame
            
            ButtonFrame.MouseButton1Click:Connect(callback)
        end
        
        return Tab
    end
    
    return Window
end

return Library 

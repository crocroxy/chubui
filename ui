local library = {
    flags = {},
    tabs = 0,
    selectedTab = nil,
    toggled = true,
    toggleKeybind = Enum.KeyCode.RightShift -- Default toggle key
}

library.Flags = library.flags

-- Dependencies
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local ViewportSize = workspace.CurrentCamera.ViewportSize
local Mouse = game.Players.LocalPlayer:GetMouse()
local Utilities = {}

-- Compatibility
local request = syn and syn.request or http and http.request or http_request or request or httprequest
local getcustomasset = getcustomasset or getsynasset
local isfolder = isfolder or syn_isfolder or is_folder
local makefolder = makefolder or make_folder or createfolder or create_folder

-- Variables
local DropIndex = 9999

-- Modern Color Scheme
local Colors = {
    Primary = Color3.fromRGB(32, 34, 37),       -- Dark background
    Secondary = Color3.fromRGB(47, 49, 54),     -- Lighter background
    Tertiary = Color3.fromRGB(54, 57, 63),      -- Button background
    Accent = Color3.fromRGB(114, 137, 218),     -- Discord-like blue
    AccentDark = Color3.fromRGB(88, 101, 242),  -- Darker accent for hover
    Text = Color3.fromRGB(255, 255, 255),       -- White text
    TextDark = Color3.fromRGB(185, 187, 190),   -- Darker text
    Red = Color3.fromRGB(240, 71, 71),          -- Error/delete red
    Green = Color3.fromRGB(59, 165, 93),        -- Success green
    Shadow = Color3.fromRGB(0, 0, 0)            -- Shadow color
}

-- Utility Functions
function Utilities:Create(class, properties, children)
    local instance = Instance.new(class)
    
    for property, value in pairs(properties or {}) do
        instance[property] = value
    end
    
    for _, child in pairs(children or {}) do
        child.Parent = instance
    end
    
    return instance
end

function Utilities:Round(Number, Increment)
    Increment = 1 / Increment
    return math.round(Number * Increment) / Increment
end

function Utilities:Tween(instance, duration, properties)
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
    local tween = game:GetService("TweenService"):Create(instance, tweenInfo, properties)
    tween:Play()
    return tween
end

function Utilities:Shadow(instance, size, transparency)
    local shadow = Utilities:Create("ImageLabel", {
        Name = "Shadow",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, size, 1, size),
        ZIndex = instance.ZIndex - 1,
        Image = "rbxassetid://7912134082",
        ImageColor3 = Colors.Shadow,
        ImageTransparency = transparency,
        Parent = instance
    })
    return shadow
end

function Utilities:GetXY(GuiObject)
    local Max, May = GuiObject.AbsoluteSize.X, GuiObject.AbsoluteSize.Y
    local Px, Py = math.clamp(Mouse.X - GuiObject.AbsolutePosition.X, 0, Max), math.clamp(Mouse.Y - GuiObject.AbsolutePosition.Y, 0, May)
    return Px/Max, Py/May
end

function Utilities:GetMouse()
    return Vector2.new(UserInputService:GetMouseLocation().X + 1, UserInputService:GetMouseLocation().Y - 35)
end

-- Create PPHUD folder and download assets
if not isfolder("PPHUD") then
    makefolder("PPHUD")
    local Arrow = request({Url = "https://raw.githubusercontent.com/Rain-Design/PPHUD/main/Dropdown.png", Method = "GET"})
    writefile("PPHUD/Arrow.png", Arrow.Body)
    local Resize = request({Url = "https://raw.githubusercontent.com/Rain-Design/PPHUD/main/resize.png", Method = "GET"})
    writefile("PPHUD/Resize.png", Resize.Body)
end

-- Window Creation
function library:Window(title)
    local window = Utilities:Create("ScreenGui", {
        Name = "ModernUI",
        Parent = game:GetService("CoreGui"),
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    local main = Utilities:Create("Frame", {
        Name = "Main",
        Size = UDim2.new(0, 600, 0, 400),
        Position = UDim2.new(0.5, -300, 0.5, -200),
        BackgroundColor3 = Colors.Primary,
        BorderSizePixel = 0,
        Parent = window,
        ZIndex = 1
    })
    
    -- Add shadow
    Utilities:Shadow(main, 15, 0.5)
    
    -- Add corner
    Utilities:Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = main
    })
    
    -- Add gradient
    local gradient = Utilities:Create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Colors.Primary),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(Colors.Primary.R - 0.05, Colors.Primary.G - 0.05, Colors.Primary.B - 0.05))
        }),
        Rotation = 45,
        Parent = main
    })
    
    -- Title bar
    local titleBar = Utilities:Create("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = Colors.Secondary,
        BorderSizePixel = 0,
        Parent = main,
        ZIndex = 2
    })
    
    Utilities:Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = titleBar
    })
    
    Utilities:Create("TextLabel", {
        Text = title,
        Size = UDim2.new(1, -20, 1, 0),
        Position = UDim2.new(0, 15, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = Colors.Text,
        TextSize = 18,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = titleBar
    })
    
    -- Make window draggable
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = main.Position
        end
    end)
    
    titleBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    -- Toggle GUI with keybind
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == library.toggleKeybind then
            library.toggled = not library.toggled
            main.Visible = library.toggled
        end
    end)
    
    -- Tab container
    local tabContainer = Utilities:Create("ScrollingFrame", {
        Name = "TabButtons",
        Size = UDim2.new(0, 150, 1, -50),
        Position = UDim2.new(0, 10, 0, 45),
        BackgroundTransparency = 1,
        ScrollBarThickness = 0,
        Parent = main,
        ZIndex = 2
    })
    
    Utilities:Create("UIListLayout", {
        Padding = UDim.new(0, 5),
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = tabContainer
    })
    
    -- Content container
    local contentContainer = Utilities:Create("Frame", {
        Name = "Content",
        Size = UDim2.new(1, -170, 1, -50),
        Position = UDim2.new(0, 160, 0, 45),
        BackgroundTransparency = 1,
        Parent = main,
        ZIndex = 2
    })
    
    local window_obj = {}
    window_obj.contentContainer = contentContainer
    window_obj.tabContainer = tabContainer
    window_obj.Main = main
    window_obj.ScreenGui = window
    
    function window_obj:Tab(name)
        library.tabs = library.tabs + 1
        
        -- Create tab button
        local tabButton = Utilities:Create("TextButton", {
            Name = name,
            Size = UDim2.new(1, -10, 0, 36),
            BackgroundColor3 = library.tabs == 1 and Colors.Accent or Colors.Tertiary,
            Parent = self.tabContainer,
            Text = "",
            AutoButtonColor = false
        })
        
        Utilities:Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = tabButton
        })
        
        local tabText = Utilities:Create("TextLabel", {
            Text = name,
            Size = UDim2.new(1, -20, 1, 0),
            Position = UDim2.new(0, 10, 0, 0),
            BackgroundTransparency = 1,
            TextColor3 = library.tabs == 1 and Colors.Text or Colors.TextDark,
            TextSize = 14,
            Font = Enum.Font.GothamBold,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = tabButton
        })
        
        -- Create tab content
        local tabContent = Utilities:Create("ScrollingFrame", {
            Name = name,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            ScrollBarThickness = 2,
            ScrollBarImageColor3 = Colors.Accent,
            Visible = library.tabs == 1,
            Parent = self.contentContainer,
            ClipsDescendants = true
        })
        
        Utilities:Create("UIListLayout", {
            Padding = UDim.new(0, 8),
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = tabContent
        })
        
        -- Tab button hover effect
        tabButton.MouseEnter:Connect(function()
            if library.selectedTab ~= tabContent then
                Utilities:Tween(tabButton, 0.2, {BackgroundColor3 = Colors.Secondary})
            end
        end)
        
        tabButton.MouseLeave:Connect(function()
            if library.selectedTab ~= tabContent then
                Utilities:Tween(tabButton, 0.2, {BackgroundColor3 = Colors.Tertiary})
            end
        end)
        
        -- Tab button click handler
        tabButton.MouseButton1Click:Connect(function()
            if library.selectedTab == tabContent then return end
            
            if library.selectedTab then
                library.selectedTab.Visible = false
                for _, button in ipairs(self.tabContainer:GetChildren()) do
                    if button:IsA("TextButton") then
                        Utilities:Tween(button, 0.2, {BackgroundColor3 = Colors.Tertiary})
                        button:FindFirstChildOfClass("TextLabel").TextColor3 = Colors.TextDark
                    end
                end
            end
            
            library.selectedTab = tabContent
            tabContent.Visible = true
            
            -- Hide all other tabs
            for _, otherTab in ipairs(self.contentContainer:GetChildren()) do
                if otherTab:IsA("ScrollingFrame") and otherTab ~= tabContent then
                    otherTab.Visible = false
                end
            end
            
            Utilities:Tween(tabButton, 0.2, {BackgroundColor3 = Colors.Accent})
            tabText.TextColor3 = Colors.Text
        end)
        
        local tab = {}
        tab.container = tabContent
        
        function tab:Section(name)
            local section = {}
            
            local sectionFrame = Utilities:Create("Frame", {
                Name = name,
                Size = UDim2.new(1, -20, 0, 36),
                BackgroundColor3 = Colors.Secondary,
                Parent = self.container
            })
            
            Utilities:Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = sectionFrame
            })
            
            -- Add subtle gradient
            Utilities:Create("UIGradient", {
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 240, 240))
                }),
                Transparency = NumberSequence.new(0.95),
                Rotation = 90,
                Parent = sectionFrame
            })
            
            Utilities:Create("TextLabel", {
                Text = name,
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                TextColor3 = Colors.Text,
                TextSize = 14,
                Font = Enum.Font.GothamBold,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = sectionFrame
            })
            
            local container = Utilities:Create("Frame", {
                Name = "Container",
                Size = UDim2.new(1, -20, 0, 0),
                Position = UDim2.new(0, 10, 0, 35),
                BackgroundTransparency = 1,
                Parent = sectionFrame
            })
            
            Utilities:Create("UIListLayout", {
                Padding = UDim.new(0, 5),
                SortOrder = Enum.SortOrder.LayoutOrder,
                Parent = container
            })
            
            -- Auto-size section
            container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                sectionFrame.Size = UDim2.new(1, -20, 0, container.UIListLayout.AbsoluteContentSize.Y + 45)
                container.Size = UDim2.new(1, -20, 0, container.UIListLayout.AbsoluteContentSize.Y)
            end)
            
            -- UI Elements
            function section:Toggle(name, default, callback)
                callback = callback or function() end
                library.flags[name] = default
                
                local toggle = Utilities:Create("Frame", {
                    Name = name,
                    Size = UDim2.new(1, 0, 0, 32),
                    BackgroundColor3 = Colors.Tertiary,
                    Parent = container
                })
                
                Utilities:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = toggle
                })
                
                local indicator = Utilities:Create("Frame", {
                    Name = "Indicator",
                    Size = UDim2.new(0, 24, 0, 24),
                    Position = UDim2.new(1, -32, 0.5, -12),
                    BackgroundColor3 = default and Colors.Green or Colors.Red,
                    Parent = toggle
                })
                
                Utilities:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = indicator
                })
                
                Utilities:Create("TextLabel", {
                    Text = name,
                    Size = UDim2.new(1, -50, 1, 0),
                    Position = UDim2.new(0, 15, 0, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = Colors.Text,
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = toggle
                })
                
                -- Click handler
                toggle.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        library.flags[name] = not library.flags[name]
                        Utilities:Tween(indicator, 0.2, {
                            BackgroundColor3 = library.flags[name] and Colors.Green or Colors.Red
                        })
                        callback(library.flags[name])
                    end
                end)
                
                -- Hover effect
                toggle.MouseEnter:Connect(function()
                    Utilities:Tween(toggle, 0.2, {BackgroundColor3 = Colors.Secondary})
                end)
                
                toggle.MouseLeave:Connect(function()
                    Utilities:Tween(toggle, 0.2, {BackgroundColor3 = Colors.Tertiary})
                end)
                
                return toggle
            end
            
            function section:Button(name, callback)
                callback = callback or function() end
                
                local button = Utilities:Create("TextButton", {
                    Name = name,
                    Size = UDim2.new(1, 0, 0, 32),
                    BackgroundColor3 = Colors.Tertiary,
                    Parent = container,
                    Text = "",
                    AutoButtonColor = false
                })
                
                Utilities:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = button
                })
                
                Utilities:Create("TextLabel", {
                    Text = name,
                    Size = UDim2.new(1, -20, 1, 0),
                    Position = UDim2.new(0, 10, 0, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = Colors.Text,
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    Parent = button
                })
                
                -- Click handler
                button.MouseButton1Click:Connect(callback)
                
                -- Hover effect
                button.MouseEnter:Connect(function()
                    Utilities:Tween(button, 0.2, {BackgroundColor3 = Colors.Secondary})
                end)
                
                button.MouseLeave:Connect(function()
                    Utilities:Tween(button, 0.2, {BackgroundColor3 = Colors.Tertiary})
                end)
                
                return button
            end
            
            function section:Slider(name, min, max, default, callback)
                callback = callback or function() end
                library.flags[name] = default
                
                local slider = Utilities:Create("Frame", {
                    Name = name,
                    Size = UDim2.new(1, 0, 0, 50),
                    BackgroundColor3 = Colors.Tertiary,
                    Parent = container
                })
                
                Utilities:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = slider
                })
                
                Utilities:Create("TextLabel", {
                    Text = name,
                    Size = UDim2.new(1, -20, 0, 30),
                    Position = UDim2.new(0, 10, 0, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = Colors.Text,
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = slider
                })
                
                local valueText = Utilities:Create("TextLabel", {
                    Text = tostring(default),
                    Size = UDim2.new(0, 50, 0, 30),
                    Position = UDim2.new(1, -60, 0, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = Colors.TextDark,
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Right,
                    Parent = slider
                })
                
                local sliderBar = Utilities:Create("Frame", {
                    Name = "Bar",
                    Size = UDim2.new(1, -20, 0, 4),
                    Position = UDim2.new(0, 10, 0, 35),
                    BackgroundColor3 = Colors.Secondary,
                    Parent = slider
                })
                
                Utilities:Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = sliderBar
                })
                
                local fill = Utilities:Create("Frame", {
                    Name = "Fill",
                    Size = UDim2.new((default - min)/(max - min), 0, 1, 0),
                    BackgroundColor3 = Colors.Accent,
                    Parent = sliderBar
                })
                
                Utilities:Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = fill
                })
                
                -- Slider functionality
                local dragging = false
                
                slider.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        
                        while dragging do
                            local percentage = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
                            local value = math.floor(min + ((max - min) * percentage))
                            
                            fill.Size = UDim2.new(percentage, 0, 1, 0)
                            valueText.Text = tostring(value)
                            library.flags[name] = value
                            callback(value)
                            
                            game:GetService("RunService").RenderStepped:Wait()
                        end
                    end
                end)
                
                game:GetService("UserInputService").InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                -- Hover effect
                slider.MouseEnter:Connect(function()
                    Utilities:Tween(slider, 0.2, {BackgroundColor3 = Colors.Secondary})
                end)
                
                slider.MouseLeave:Connect(function()
                    Utilities:Tween(slider, 0.2, {BackgroundColor3 = Colors.Tertiary})
                end)
                
                return slider
            end
            
            function section:Dropdown(name, options, callback)
                callback = callback or function() end
                library.flags[name] = options[1]
                
                local dropdown = Utilities:Create("Frame", {
                    Name = name,
                    Size = UDim2.new(1, 0, 0, 32),
                    BackgroundColor3 = Colors.Tertiary,
                    Parent = container,
                    ZIndex = 3
                })
                
                Utilities:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = dropdown
                })
                
                local selected = Utilities:Create("TextLabel", {
                    Text = options[1],
                    Size = UDim2.new(1, -50, 1, 0),
                    Position = UDim2.new(0, 15, 0, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = Colors.Text,
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = dropdown
                })
                
                local arrow = Utilities:Create("ImageLabel", {
                    Size = UDim2.new(0, 12, 0, 12),
                    Position = UDim2.new(1, -25, 0.5, -6),
                    BackgroundTransparency = 1,
                    Image = "rbxassetid://6034818372",
                    ImageColor3 = Colors.TextDark,
                    Parent = dropdown
                })
                
                local optionContainer = Utilities:Create("Frame", {
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.new(0, 0, 1, 5),
                    BackgroundColor3 = Colors.Tertiary,
                    Visible = false,
                    Parent = window_obj.ScreenGui, -- Parent to ScreenGui instead of dropdown
                    ZIndex = 100 -- Ensure it's always on top
                })
                
                Utilities:Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = optionContainer
                })
                
                local optionList = Utilities:Create("UIListLayout", {
                    Padding = UDim.new(0, 5),
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Parent = optionContainer
                })
                
                -- Create option buttons
                for _, option in ipairs(options) do
                    local optionButton = Utilities:Create("TextButton", {
                        Text = "",
                        Size = UDim2.new(1, 0, 0, 30),
                        BackgroundTransparency = 1,
                        Parent = optionContainer
                    })
                    
                    Utilities:Create("TextLabel", {
                        Text = option,
                        Size = UDim2.new(1, -20, 1, 0),
                        Position = UDim2.new(0, 10, 0, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Colors.TextDark,
                        TextSize = 14,
                        Font = Enum.Font.Gotham,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        Parent = optionButton
                    })
                    
                    -- Option button handler
                    optionButton.MouseButton1Click:Connect(function()
                        selected.Text = option
                        library.flags[name] = option
                        optionContainer.Visible = false
                        callback(option)
                    end)
                    
                    -- Hover effect
                    optionButton.MouseEnter:Connect(function()
                        optionButton.TextLabel.TextColor3 = Colors.Text
                    end)
                    
                    optionButton.MouseLeave:Connect(function()
                        optionButton.TextLabel.TextColor3 = Colors.TextDark
                    end)
                end
                
                -- Update option container size
                optionContainer.Size = UDim2.new(1, 0, 0, (#options * 35) - 5)
                
                -- Update option container position when dropdown moves
                RunService.RenderStepped:Connect(function()
                    if optionContainer.Visible then
                        local dropdownPosition = dropdown.AbsolutePosition
                        local dropdownSize = dropdown.AbsoluteSize
                        optionContainer.Position = UDim2.new(0, dropdownPosition.X, 0, dropdownPosition.Y + dropdownSize.Y + 5)
                        optionContainer.Size = UDim2.new(0, dropdownSize.X, 0, (#options * 35) - 5)
                    end
                end)
                
                -- Dropdown toggle
                dropdown.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        optionContainer.Visible = not optionContainer.Visible
                        Utilities:Tween(arrow, 0.2, {
                            Rotation = optionContainer.Visible and 180 or 0
                        })
                    end
                end)
                
                -- Hover effect
                dropdown.MouseEnter:Connect(function()
                    Utilities:Tween(dropdown, 0.2, {BackgroundColor3 = Colors.Secondary})
                end)
                
                dropdown.MouseLeave:Connect(function()
                    Utilities:Tween(dropdown, 0.2, {BackgroundColor3 = Colors.Tertiary})
                end)
                
                -- Close dropdown when clicking outside
                UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local mousePosition = Vector2.new(input.Position.X, input.Position.Y)
                        if not (dropdown.AbsolutePosition.X <= mousePosition.X and 
                               mousePosition.X <= dropdown.AbsolutePosition.X + dropdown.AbsoluteSize.X and
                               dropdown.AbsolutePosition.Y <= mousePosition.Y and
                               mousePosition.Y <= dropdown.AbsolutePosition.Y + dropdown.AbsoluteSize.Y) and
                           not (optionContainer.AbsolutePosition.X <= mousePosition.X and
                               mousePosition.X <= optionContainer.AbsolutePosition.X + optionContainer.AbsoluteSize.X and
                               optionContainer.AbsolutePosition.Y <= mousePosition.Y and
                               mousePosition.Y <= optionContainer.AbsolutePosition.Y + optionContainer.AbsoluteSize.Y) then
                            optionContainer.Visible = false
                            Utilities:Tween(arrow, 0.2, {Rotation = 0})
                        end
                    end
                end)
                
                return dropdown
            end
            
            return section
        end
        
        if library.tabs == 1 then
            library.selectedTab = tabContent
        end
        
        return tab
    end
    
    return window_obj
end

return library 
